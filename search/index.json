[{"content":"라이브러리 개요 라이브러리 개발 배경 사이트마다 다른 사인패드 장치를 사용 사이트마다 다르게 구현된 소스 장치연동에 필요한 설정이 하드코딩 되어 고정된 환경 (COM 포트 번호, 웹 서비스 포트 번호 등) 지저분하게 구현된 사인패드 장치 연동 소스 구조 동일 사이트에서 여러 종류의 사인패드 장치를 사용 라이브러리 개발 목표 SignPadPicker 라이브러리는 아래 같은 내용을 개선하기 위한 목표로 개발 되었습니다.\n소스 통합을 위한 구현 소스 일원화 장치연동에 필요한 설정 값을 의존성 주입하여 유연한 환경 설정 지원 동일 사이트 내 다양한 사인패드 장치 연동성 제공 신규 장치 연동 개발의 확장성과 유지보수성 향상 라이브러리 모듈 구조의 이해 메인 모듈의 플러그인 모듈 로더를 통해 플러그인 모듈을 획득. 정의된 인터페이스에 따라 플러그인 모듈의 기능을 사용. 플러그인 모듈에 대한 직접적인 의존성을 해소하여, 유연한 모듈 활용이 가능. 메인 모듈(SignPadPicker) 클래스 다이어그램 classDiagram SignPadConfig \u003c-- ISignPadPlugin ISignPadPlugin \u003c-- SignPadLoader class SignPadConfig{ +int HttpPort +int ComPort +int ComSpeed +string Message1 +string Message2 +string Message3 +string Message4 +string ImgFilePath } class ISignPadPlugin{ +string Activate(SignPadConfig config) } class SignPadLoader{ +List~ISignPadPlugin~ Plugins$ +LoadPlugins(string path) +GetPlugin(string name) ISignPadPlugin$ +GetPlugin(IEnumerable~string~ names = null, IEnumerable~string~ excepts = null, bool onlyPhysicalDevice = false) ISignPadPlugin$ } 플러그인 모듈(SignPadPicker.*SignPadAdaptor) 클래스 다이어그램 classDiagram ISignPadPlugin \u003c|-- ScreenSignPad ISignPadPlugin \u003c|-- KisSignPad ISignPadPlugin \u003c|-- KscatSignPad ISignPadPlugin \u003c|-- NiceSignPad KisSignPad --\u003e KisDongleDll KscatSignPad --\u003e ksnetcomm NiceSignPad --\u003e NICEPOSICV105 namespace SignPadPicker { class ISignPadPlugin{ string Activate(SignPadConfig config) } } namespace ScreenSignPadAdaptor { class ScreenSignPad{ +string Activate(SignPadConfig config) } } namespace KisSignPadAdaptor { class KisSignPad{ +string Activate(SignPadConfig config) } } namespace KscatSignPadAdaptor { class KscatSignPad{ +string Activate(SignPadConfig config) } } namespace NicePosSignPadAdaptor { class NiceSignPad{ +string Activate(SignPadConfig config) } } 개발 가이드 프로젝트에 모듈 참조 추가 사인패드 장치연동 기능이 필요한 프로젝트에 SignPadPicker.dll 모듈을 참조에 추가 합니다. SignPadPicker.KisSignPadAdaptor.dll 같은 플러그인 모듈이나 KisDongleDll.dll 같은 벤더사에서 제공하는 모듈은 참조가 필요 없으니 주의! 사인패드 플러그인 모듈 로드 애플리케이션에 배포 및 설치된 플러그인 라이브러리 모듈을 로드 합니다. 애플리케이션의 폴더 구조가 복잡하다면, SignPadPicker.dll 모듈과 라이브러리 모듈은 Core 폴더에 배포를 권장 합니다. 아래 코드는 애플리케이션 기본 폴더 밑의 Core 폴더에서 플러그인 라이브러리 모듈을 찾아 로드 하는 코드 입니다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public SaveFormWritePanelData() { LoadSignPadPlugins(); } private void LoadSignPadPlugins() { try { SignPadLoader loader = new SignPadLoader(); loader.LoadPlugins(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \u0026#34;Core\u0026#34;)); } catch (Exception ex) { MessageBoxEx.Show(this, \u0026#34;사인패드 플러그인 모듈 로드에 실패했습니다.\u0026#34;, MessageBoxImage.Exclamation); Console.WriteLine(string.Format(\u0026#34;Plugins couldn\u0026#39;t be loaded: {0}\u0026#34;, ex.Message)); } } 사용자 PC에 설정된 사인패드 환경설정 불러오기 사용자 PC 마다 다른 사인패드 장치를 사용할 수 있으며, 사인패드 장치가 연결된 COM Port 등의 환경설정 값이 다를 수 있습니다. 이런 설정 값은 애플리케이션의 정책에 따라 사용자 PC에 저장되어 있습니다. 먼저, 사용자 PC에 저장된 설정 값을 불러와야 합니다. 아래 코드는 윈도우 레지스트리에 저장된 사인패드 설정 값을 불러오는 예시 코드 입니다. 사인패드 설정 정보를 불러 온 후 공통코드의 데이터 정보를 조회 합니다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public CCCCCSTE_INOUT GetSignPadInfo() { string bcRegistryKey = CommonServiceAgent.GetConfigurationInfo(\u0026#34;BESTCARE_REGISTRY_KEY\u0026#34;) ?? \u0026#34;CNUH\u0026#34;; string[] commonCodes = new[] { \u0026#34;PA364\u0026#34; // 사인패드 공통그룹 코드 }; // 레지스트리에 등록된 사인패드 명을 가져온다 RegistryKey regKey = Registry.CurrentUser.CreateSubKey(bcRegistryKey).CreateSubKey(\u0026#34;SIGN\u0026#34;, RegistryKeyPermissionCheck.ReadWriteSubTree); RegistryKey reg = Registry.CurrentUser; reg = reg.OpenSubKey($\u0026#34;{bcRegistryKey}\\\\SIGN\u0026#34;, true); //레지스트리에 사인패드가 등록되지 않았다면, 공통 그룹 코드의 기본 값으로 가져온다. DTOCollectionBase\u0026lt;CCCCCSTE_INOUT\u0026gt; supportedSignPads = CommonServiceAgent.SelectCodeByGroups(commonCodes, UseYN.Use); // 레지스트리에 등록된 사인패드 정보 조회 return reg.GetValue(\u0026#34;SIGNPAD_NAME\u0026#34;) != null ? supportedSignPads.FirstOrDefault(x =\u0026gt; x.COMN_CD_NM == Convert.ToString(reg.GetValue(\u0026#34;SIGNPAD_NAME\u0026#34;))) : supportedSignPads.FirstOrDefault(); } 사용자 PC에 설정된 사인패드 포트 환경설정 불러오기 아래 코드는 윈도우 레지스트리에 저장된 사인패드 연결 포트 설정 값을 불러오는 예시 코드 입니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public int GetSerialCOMPort() { string bcRegistryKey = CommonServiceAgent.GetConfigurationInfo(\u0026#34;BESTCARE_REGISTRY_KEY\u0026#34;) ?? \u0026#34;CNUH\u0026#34;; int selectedPort = 0; // 레지스트리에 등록된 사인패드 포트를 가져온다 RegistryKey regKey = Registry.CurrentUser.CreateSubKey(bcRegistryKey).CreateSubKey(\u0026#34;SIGN\u0026#34;, RegistryKeyPermissionCheck.ReadWriteSubTree); RegistryKey reg = Registry.CurrentUser.OpenSubKey($\u0026#34;{bcRegistryKey}\\\\SIGN\u0026#34;, true); if (reg != null) { string signpadPortValue = Convert.ToString(reg.GetValue(\u0026#34;SIGNPAD_PORT\u0026#34;)); if (!string.IsNullOrEmpty(signpadPortValue) \u0026amp;\u0026amp; signpadPortValue.StartsWith(\u0026#34;COM\u0026#34;)) { // \u0026#34;COM\u0026#34; 접두사를 제거한 포트 번호 문자열을 생성한다 string portNumberString = signpadPortValue.Replace(\u0026#34;COM\u0026#34;, string.Empty); if (int.TryParse(portNumberString, out int portNumber)) { selectedPort = portNumber; // 선택된 포트 번호를 할당한다 } } else { int usbSerialPort = GetUSBSerialCOMPort(); if (usbSerialPort != 0) { regKey.SetValue(\u0026#34;SIGNPAD_PORT\u0026#34;, $\u0026#34;COM{usbSerialPort}\u0026#34;, RegistryValueKind.String); selectedPort = usbSerialPort; // 선택된 USB 시리얼 포트 번호를 할당한다 } } } return selectedPort; // 선택된 포트 번호를 반환한다 } 아래 코드는 시스템 개체 컬렉션에서 연결된 장치의 포트번호를 가져오는 예시 코드 입니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public static int GetUSBSerialCOMPort() { int nport = 0; List\u0026lt;string\u0026gt; coms = new List\u0026lt;string\u0026gt;(); try { using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(\u0026#34;root\\\\CIMV2\u0026#34;, \u0026#34;SELECT * FROM Win32_PnPEntity WHERE ConfigManagerErrorCode = 0 AND Caption like \u0026#39;USB Serial Port%\u0026#39; \u0026#34;)) { foreach (ManagementObject obj in searcher.Get()) { object captionObj = obj[\u0026#34;Caption\u0026#34;]; if (captionObj != null) { string caption = captionObj.ToString(); coms.Add(caption); int nfirst = coms[0].IndexOf(\u0026#34;(COM\u0026#34;); int nend = coms[0].IndexOf(\u0026#34;)\u0026#34;, nfirst); nend = (nend) - (nfirst + 4); if (coms[0].Length \u0026gt; nfirst + 4) { if (!int.TryParse(coms[0].Substring(nfirst + 4, nend), out nport)) nport = 12; } break; } } } } catch (ManagementException) { return nport; } return nport; } 아래 코드는 시스템 개체 컬렉션에서 연결된 장치의 연결 속도를 가져오는 예시 코드 입니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 public int GetUSBSerialPortBaudRate() { string portName = \u0026#34;\u0026#34;; using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(\u0026#34;root\\\\CIMV2\u0026#34;, \u0026#34;SELECT * FROM Win32_PnPEntity WHERE Caption like \u0026#39;USB Serial Port%\u0026#39; \u0026#34;)) { foreach (ManagementObject queryObj in searcher.Get()) { string caption = queryObj[\u0026#34;Caption\u0026#34;].ToString(); if (caption.Contains(\u0026#34;(COM\u0026#34;)) { int startIndex = caption.IndexOf(\u0026#34;(COM\u0026#34;) + 1; int endIndex = caption.IndexOf(\u0026#34;)\u0026#34;, startIndex); portName = caption.Substring(startIndex, endIndex - startIndex); break; } } } if (!string.IsNullOrEmpty(portName)) { try { using (SerialPort port = new SerialPort(portName)) { port.Open(); // Open the port return port.BaudRate; } } catch (Exception ex) { MessageBoxEx.Show(this, $\u0026#34;Failed to open {portName}. Error: {ex.Message}\u0026#34;); } } else { MessageBoxEx.Show(this, \u0026#34;USB Serial Port not found.\u0026#34;); } return 0; } 사인패드 플러그인 모듈을 통한 장치 연동 활성화 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 try { string tempFilePath = string.Empty; if (e.IsSignPad) { // PC에 저장된 사인패드 정보 (공통코드) // signPad.DTRL1_NM : 연결 속도 (Baud) 정보 // signPad.DTRL6_NM : 플러그인 이름 CCCCCSTE_INOUT signPad = GetSignPadInfo(); if (signPad == null) { throw new SignPadNotAvailableException(); } string signPadPluginName = signPad.DTRL6_NM; int comPort = GetSerialCOMPort(); // PC에 저장된 사인패드 COM 포트 정보 int comSpeed = signPad.DTRL1_NM != null ? int.Parse(signPad.DTRL1_NM) : GetUSBSerialPortBaudRate(); // 플러그인 이름으로 모듈 객체를 얻습니다. ISignPadPlugin plugin = SignPadLoader.GetPlugin(name: signPadPluginName); tempFilePath = plugin.Activate(new SignPadConfig { ComPort = comPort, ComSpeed = comSpeed, }); // 장치의 환경설정 값과 함께 장치 연동을 활성화 합니다. } else { // 물리적인 사인패드 장치가 아닌 마우스로 사인을 그리는 기능을 이용하려면, // 플러그인 이름을 “ScreenSignPad”로 호출하세요. ISignPadPlugin plugin = SignPadLoader.GetPlugin(name: \u0026#34;ScreenSignPad\u0026#34;); tempFilePath = plugin.Activate(); } string destFileName = Path.Combine(EnvironmentVariables.BitmapLocalPath, DateTime.Now.ToString(\u0026#34;yyyyMMddHHmmssfff\u0026#34;) + \u0026#34;.bmp\u0026#34;); // 서명이 완료된 서명 이미지를 임시 파일에서 사용하고자 하는 파일명으로 변경 합니다. File.Move(tempFilePath, destFileName); if (!string.IsNullOrEmpty(destFileName)) ((Item)e.Item).Value = destFileName; } // 사인패드 플러그인 모듈을 사용하면서 발생할 수 있는 예외 처리를 구현 합니다. catch (SignPadNotInstalledException) { MessageBoxEx.Show(this, \u0026#34;사인패드 제어 프로그램 설치가 필요합니다.\u0026#34;); } catch (SignPadNotAvailableException) { MessageBoxEx.Show(this, \u0026#34;현재 PC에 연결되어 있는 전자서명 패드 장비가 없거나 연결 실패 하였습니다.\u0026#34;); } catch (SignFailException) { MessageBoxEx.Show(this, \u0026#34;서명 취소 또는 시간이 초과되었습니다.\u0026#34;); } catch (SignCancelException) { MessageBoxEx.Show(this, \u0026#34;서명이 취소 되었습니다.\u0026#34;); } catch (Exception ex) { MessageBoxEx.Show(this, ex.Message); } ","date":"2023-10-11T08:23:10+09:00","permalink":"https://jinholee275.github.io/p/signpadpicker-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%82%AC%EC%9A%A9%EC%9E%90-%EB%A7%A4%EB%89%B4%EC%96%BC/","title":"SignPadPicker 라이브러리 사용자 매뉴얼"}]